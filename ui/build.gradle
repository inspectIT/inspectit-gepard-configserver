plugins {
    id "com.github.node-gradle.node" version "7.0.2"
    id 'base'
}

repositories {
    mavenCentral()
}

node {
    /* gradle-node-plugin configuration
       https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md

       Task name pattern:
       ./gradlew npm_<command> Executes an NPM command.
    */

    // Version of node to use.
    version = '20.9.0'

    // Version of npm to use.
    npmVersion = ''

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true
}

tasks.register("packageNpmApp", Jar) {
    dependsOn npm_run_testNoWatch
    dependsOn npm_run_build

        archiveBaseName = 'ui'
        archiveExtension = 'jar'
        destinationDirectory = file("${projectDir}/build_packageClient")

        from 'npm_run_build' {
            into 'static'
        }


}

npm_run_testNoWatch {
    inputs.files fileTree('app')
    inputs.files fileTree('public')
    inputs.file 'package.json'
    inputs.file 'package-lock.json'

    outputs.dir 'testResults'
}

npm_run_build {
    inputs.files fileTree('app')
    inputs.files fileTree('public')
    inputs.file 'package.json'
    inputs.file 'package-lock.json'

    outputs.dir 'build'
}

assemble.dependsOn packageNpmApp

configurations {
    clientImplementation {
        canBeConsumed = true
        canBeResolved = false
    }
}

configurations.default.extendsFrom(configurations.clientImplementation)

artifacts {
    clientImplementation(packageNpmApp)
}

clean {
    delete packageNpmApp.archiveFile
    delete "${projectDir}/build_packageClient"
    delete "${projectDir}/build"
    delete "${projectDir}/.next"
}

